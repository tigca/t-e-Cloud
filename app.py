import subprocess
import logging

from aiogram import Bot, Dispatcher, executor
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, InlineQueryResultArticle,
    InputTextMessageContent, CallbackQuery, Message
)

import asyncio
from functools import wraps, partial

logging.basicConfig(level=logging.INFO)
with open('config.txt', 'r') as file:
    bot_token = file.read()

# login
bot = Bot(bot_token)
dp = Dispatcher(bot)

# handler /start command

def to_async(func):
    @wraps(func)
    async def run(*args, loop=None, executor=None, **kwargs):
        if loop is None:
            loop = asyncio.get_event_loop()
        pfunc = partial(func, *args, **kwargs)
        return await loop.run_in_executor(executor, pfunc)
    return run 

def safe_command(code: str) -> bool:
    files = ['bot.py', 'config.txt', 'Dockerfile']

    for file in files:
        if file in code:
            return False

    return True

@to_async
def run(command: str) -> str:
    try:
        return subprocess.check_output(
            command, shell=True, timeout=5, stderr=subprocess.STDOUT).decode('utf-8')
    except subprocess.TimeoutExpired:
        return "ü•≤ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"
    except subprocess.CalledProcessError as e:
        return e.output.decode('utf-8')

@to_async
def process_inline_command(command):
    safe = safe_command(command)
    if command.startswith(("ls", "dir", "pwd", "git", "cat")) and safe:
        try:
            output = subprocess.check_output(command, shell=True, timeout=5, stderr=subprocess.STDOUT).decode('utf-8')
            response = f"‚å®Ô∏è –ö–æ–º–∞–Ω–¥–∞: {command}\n\n‚ú≥Ô∏è –í—ã–≤–æ–¥:\n{output}"
            return response
        except subprocess.TimeoutExpired:
            return "ü•≤ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"
        except subprocess.CalledProcessError as e:
            response = f"‚å®Ô∏è –ö–æ–º–∞–Ω–¥–∞: {command}\n\nüö´ –û—à–∏–±–∫–∞:\n{e.output.decode('utf-8')}"
            return response
    else:
        return "üö´ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–∞"



@dp.message_handler(commands=['start'])
async def start(message: Message):
    keyboard = InlineKeyboardMarkup()

    account = InlineKeyboardButton('üìñ –ê–∫–∫–∞—É–Ω—Ç', callback_data='account')
    faq = InlineKeyboardButton('üìñ FAQ', callback_data='button2')

    close = InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data='button3')
    keyboard.row(faq, account)
    keyboard.row(close)

    welcome_message = '<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é\n\n' \
                      'üêØ –ê —Ç—É—Ç, <a href="https://t.me/TriggerEarth">–Ω–∞—à –∫–∞–Ω–∞–ª</a>\n' \
                      'üßë‚Äçüíª –ò –≤–æ—Ç —Ç—É—Ç, <a href="https://t.me/trigger_chat">—á–∞—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏</a>\n\n' \
                      'üíö –°–ø–∞—Å–∏–±–æ <a href="http://VIP_IPru_tw.t.me">VIP*</a>\n\n' \
                      'ü§¥ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: 0.1 [Beta] ‚ö°</b>'
    await message.reply(
        welcome_message, 
        reply_markup=keyboard, 
        parse_mode='HTML',
        disable_web_page_preview=True
    )


@dp.callback_query_handler(lambda call: call.data == 'button3')
async def close_menu(call):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await bot.answer_callback_query(call.id)

@dp.callback_query_handler(lambda call: call.data == 'account')
async def account_menu(call: CallbackQuery):
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton('‚úà –û–ø–ª–∞—Ç–∞', callback_data='money'),
        InlineKeyboardButton('üî∑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è', callback_data='connections'),
        InlineKeyboardButton('üíµ –¢–∞—Ä–∏—Ñ—ã', callback_data='tarif')
    )
    keyboard.row(InlineKeyboardButton('‚òï –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url='https://t.me/+8OUdVbortIw4MTQy'))

    await bot.edit_message_text(
        '<b>‚ùáÔ∏è –ü–µ—Ä–µ–¥–≤–∏–≥–∞–π—Å—è –ø–æ –∫–Ω–æ–ø–∫–∞–º</b>',
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML'
    )
    await bot.edit_message_reply_markup(
        call.message.chat.id,
        call.message.message_id,
        call.inline_message_id,
        reply_markup=keyboard
    )


@dp.callback_query_handler(lambda _: True)
async def handle_button_click(call):
    if call.data == 'button1':
        # button1
        await bot.send_message(call.message.chat.id, 'soon...')
    elif call.data == 'button2':
        # button2
        await bot.send_message(call.message.chat.id, 'soon...')


@dp.message_handler(commands=['t'])
async def execute_command(message):
    command = message.text.split('/t', maxsplit=1)[1].strip()

    if not command:
        await message.reply("‚òùÔ∏è –ü—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞, —É–∫–∞–∂–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        return

    safe = safe_command(command)
    if command.startswith(("ls", "dir", "pwd", "git", "cat")) and safe:
        output = await run(command)
        response = f"‚å®Ô∏è –ö–æ–º–∞–Ω–¥–∞: {command}\n\n‚ú≥Ô∏è –í—ã–≤–æ–¥:\n{output}"
        await message.reply(response)
    else:
        await message.reply("üö´ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–∞")
        
@dp.inline_handler(lambda query: query.query.startswith('/t '))
async def handle_inline_t_command(query):
    command = query.query[3:].strip()
    response = await process_inline_command(command)
    await bot.answer_inline_query(
        query.id,
        [
            InlineQueryResultArticle(
                id='1', 
                title='Command result', 
                input_message_content=InputTextMessageContent(response)
            )
        ]
    )

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=print('Started'))
